// pipeline {
//     agent any
//     environment{
//         DOCKER_CREDENTIALS = credentials('jenkinstoken')
//         branchname = null
//         servicename = []
//     }
//     stages {
//         //sh def buildNumber=${env.BUILD_NUMBER}
//         stage('determin branch and service') {
//             steps {
//                 println(env.branch)
//                 if (env.branch =~ "develop"){
//                     then {
//                         branchname = "develop"
//                     }
//                 }
//                 if (env.branch =~ "master"){
//                     then {
//                         branchname = "master"
//                     }
//                 }
//                 if (env.branch =~ "yolo"){
//                     then {
//                         servicename += "yolo"
//                     }
//                 }
//                 if (env.branch =~ "poly"){
//                     then {
//                         servicename += "poly"
//                     }
//                 }
//                 if (branchname == null || servicename ==[])
//                     then {
//                         println ("the branch name is not correct you nead to rename the branch the job will stop")
//                         exit 1
//                     }
//                 }
//             }
//         }
pipeline {
    agent any
    environment {
        DOCKER_CREDENTIALS = credentials('jenkinstoken')
        branchname = '' // Initialize with an empty string
        servicename = [] // Initialize with an empty list
    }
    stages {
        stage('Determine branch and service') {
            steps {
                script {
                    // Assuming BRANCH_NAME is a custom environment variable you've set
                    println("Branch: ${env.BRANCH_NAME}")
                    if (env.BRANCH_NAME == "develop") {
                        branchname = "develop"
                    } else if (env.BRANCH_NAME == "master") {
                        branchname = "master"
                    } else if (env.BRANCH_NAME == "yolo") {
                        servicename.add("yolo")
                    } else if (env.BRANCH_NAME == "poly") {
                        servicename.add("poly")
                    }

                    if (branchname.isEmpty() || servicename.isEmpty()) {
                        error("The branch name is not correct or no service name provided; the job will stop.")
                    }
                }
            }
        }
    }
}
        stage('Build') {
            steps {
            sh '''
                echo ${BUILD_NUMBER}
                for (sr in servicename){
                        dockerrepo=amirstudent3232/${sr}
                        docker build -t $dockerrepo:${BUILD_NUMBER} .
                        //docker tag $dockerrepo:${BUILD_NUMBER} $dockerrepo:${BUILD_NUMBER}
                }
            '''
            }
        }
        stage('uploade image to dockerhub:') {
            steps {
            sh'''
            for (sr in servicename){
                    dockerrepo=amirstudent3232/${sr}
                    echo $DOCKER_CREDENTIALS_PSW | docker login -u $DOCKER_CREDENTIALS_USR --password-stdin
                    docker push $dockerrepo:${BUILD_NUMBER}
            }
            '''
            }
            post {
                always {
                    script {
                    sh '''
                        docker system prune -a --force
                    '''
                    }
                }
            }
        }
        stage('merge feat branch to develop or master branch') {
            steps {
                sh '''
                    git checkout develop
                    git merge env.branch
                '''
             }
        }
        stage('Deploy job') {
            when{
                expresion {env.branch =~ "true"}
            }
            steps {
                sh '''
                    for (sr in servicename){
                        sed -i -e "s; image:| image: amirstudent3232/${sr}:${BUILD_NUMBER};g" ./k8s/${}sr}.yaml
                    }
                '''
            }
        }
    }
