pipeline {
    agent any
    environment {
        DOCKER_CREDENTIALS = credentials('jenkinstoken')
        def branchname = '' // Initialize with an empty string
        def servicename = ''//[] // Initialize with an empty list
        def COMMIT_MESSAGE = ''
    }
    stages {
        stage('Determine branch and service') {
            steps {
                script {
                    def commitMessage = sh(script: 'git log -1 --pretty=%B ${GIT_COMMIT}')
                    COMMIT_MESSAGE = commitMessage
                    println(env.COMMIT_MESSAGE)
                    println("Branch: ${env.GIT_BRANCH}")
                    if (env.GIT_BRANCH == "develop") {
                        env.branchname = "develop"
                    } else if (env.GIT_BRANCH == "master") {
                        env.branchname = "master"
                    } else if (env.COMMIT_MESSAGE == "yolo") {
                        env.servicename.add("yolo")
                    } else if (env.COMMIT_MESSAGE == "poly") {
                        env.servicename.add("poly")
                    }
                    println("the service is ")
                    println(env.servicename)
                    println("the branch is ")
                    println(env.branchname)
                    sh 'printenv'
                    if (env.branchname == null || env.servicename == null) {
                        error("The branch name is not correct or no service name provided; the job will stop now!.")
                        sh 'exit 1'
                    }
                }
            }
        }
        stage('Build') {
            steps {
            sh '''
                echo ${BUILD_NUMBER}
                for (sr in servicename){
                        dockerrepo=amirstudent3232/${sr}
                        docker build -t $dockerrepo:${BUILD_NUMBER} .
                        //docker tag $dockerrepo:${BUILD_NUMBER} $dockerrepo:${BUILD_NUMBER}
                }
            '''
            }
        }
        stage('uploade image to dockerhub:') {
            steps {
            sh'''
            for (sr in servicename){
                    dockerrepo=amirstudent3232/${sr}
                    echo $DOCKER_CREDENTIALS_PSW | docker login -u $DOCKER_CREDENTIALS_USR --password-stdin
                    docker push $dockerrepo:${BUILD_NUMBER}
            }
            '''
            }
            post {
                always {
                    script {
                    sh '''
                        docker system prune -a --force
                    '''
                    }
                }
            }
        }
//         stage('merge feat branch to develop or master branch') {
//             steps {
//                 sh '''
//                     git checkout env.branchname}
//                     git merge env.BRANCH_NAME
//                 '''
//              }
//         }
        stage('Deploy job') {
            when {
                expression {env.COMMIT_MESSAGE =~ "true"}
            }
            steps {
                sh '''
                    for (sr in servicename){
                        sed -i -e "s; image:| image: amirstudent3232/${sr}:${BUILD_NUMBER};g" ./k8s/${}sr}.yaml
                    }
                '''
            }
        }
    }
}