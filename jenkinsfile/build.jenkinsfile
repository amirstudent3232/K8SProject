pipeline {
    agent any
    environment {
        DOCKER_CREDENTIALS = credentials('jenkinstoken')
        AMIR_TOKEN = credentials('amir-token')
        COMMIT_MESSAGE = ''
        def FIRSTSERVICENAM = ''
        def SECONDSERVICENAM = ''
    }
    stages {
        stage('Determine branch and service') {
            steps {
                script {
                    def SERVICES = ''
                    def FIRSTSERVICE = ''
                    def SECONDSERVICE = ''
                    COMMIT_MESSAGE = sh(script: "git log -1 --pretty=%B ${env.GIT_COMMIT}", returnStdout: true).trim()
                    println(1)
                    println("Commit Message: ${COMMIT_MESSAGE}")
                    println("Branch: ${env.GIT_BRANCH}")
                    println(2)
                    if (env.GIT_BRANCH =~ "develop") {
                        println("amir 1")
                        env.BRANCHNAME = "dev"
                        println(env.BRANCHNAME)
                    }
                    if (env.GIT_BRANCH =~ "master") {
                        println("amir 2")
                        env.BRANCHNAME = "prod"
                        println(env.BRANCHNAME)
                    }
                    if (COMMIT_MESSAGE =~ "yolo") {
                        println("amir 3")
                        FIRSTSERVICE = "yolo"
                        println(FIRSTSERVICE)
                    }
                    if (COMMIT_MESSAGE =~ "poly") {
                        println("amir 4")
                        SECONDSERVICE = "poly"
                        println(SECONDSERVICE)
                    }
                     env.FIRSTSERVICENAME = ''
                     env.FIRSTSERVICENAME = FIRSTSERVICE
                     env.SECONDSERVICENAME = ''
                     env.SECONDSERVICENAME = SECONDSERVICE
                     env.SERVICENAME = []
                     env.SERVICENAME = SERVICES.split(',').collect { it.trim() }
                }
            }
        }
        stage('triger waitToUserAction job') {
            steps {
                script {
                    def massageToUser = ''
                    if (env.FIRSTSERVICENAME == "yolo" && env.SECONDSERVICENAME == "poly") {
                        massageToUser = 'Do you want To Continue? ' + 'the apps to build: ' + env.FIRSTSERVICENAME + ', ' + env.SECONDSERVICENAME
                    }else if (env.FIRSTSERVICENAME == "yolo" && env.SECONDSERVICENAME == '') {
                        massageToUser = 'Do you want To Continue? ' + 'the apps to build: ' + env.FIRSTSERVICENAME
                    }else if (env.FIRSTSERVICENAME == '' && env.SECONDSERVICENAME == "poly") {
                        massageToUser = 'Do you want To Continue? ' + 'the apps to build: ' + env.SECONDSERVICENAME
                    }else {
                        error("ther is no service to build the job will stop")
                    }
                    try {
                        timeout(time: 10, unit: 'MINUTES') {
                            /* groovylint-disable-next-line UnusedVariable */
                            Object userInput = input(
                                id: 'confirmContinue',
                                message: massageToUser,
                                submitterParameter: 'CONFIRMED_BY',
                                ok: 'Continue'
                            )
                            echo 'continue...'
                        }
                    }
                    catch (e) {
                        if (e.toString().contains('TimeoutStepExecution$ExceededTimeout')) {
                            echo 'Timeout after 10 minutes. Execution is aborted.   '
                        }
                        else {
                            echo 'aborted...'
                        }
                        env.ABORT_PIPELINE = 'true'
                    }
                    if (env.ABORT_PIPELINE == 'true'){
                        error("the job aborted")
                    }
                }
            }
        }
        stage('Build') {
            steps {
                script {
                    sh '''
                        #pwd
                        #printenv
                        #ls -a
                        #servicename=$SERVICENAME
                        #echo $servicename
                        #for sr in $servicename; do
                            if [ $FIRSTSERVICENAME == "yolo" ]; then
                                cd ${WORKSPACE}/yolo
                                pwd
                                echo "building yolo"
                                dockerrepo="amirstudent3232/yolo"
                                docker build -t "${dockerrepo}:${BUILD_NUMBER}" .
                                docker tag "${dockerrepo}:${BUILD_NUMBER}" "${dockerrepo}:${BUILD_NUMBER}"
                                echo "building yolo finished successfully"
                            fi
                            if [ $SECONDSERVICENAME == "poly" ]; then
                                cd ${WORKSPACE}/polybot
                                echo "building poly"
                                dockerrepo="amirstudent3232/poly"
                                docker build -t "${dockerrepo}:${BUILD_NUMBER}" .
                                docker tag "${dockerrepo}:${BUILD_NUMBER}" "${dockerrepo}:${BUILD_NUMBER}"
                                echo "building poly finished successfully"
                            fi
                        #done
                    '''
                }
            }
        }
        stage('uploade image to dockerhub:') {
            steps {
            sh'''
                echo "start uploading images"
                servicename=$SERVICENAME
                echo "services ar: servicename"
                #for sr in $servicename; do
                    if [ $FIRSTSERVICENAME == "yolo" ]; then
                        dockerrepo=amirstudent3232/yolo
                        echo $DOCKER_CREDENTIALS_PSW | docker login -u $DOCKER_CREDENTIALS_USR --password-stdin
                        docker push $dockerrepo:${BUILD_NUMBER}
                        echo "uploading yolo finished successfully"
                    fi
                    if [ $SECONDSERVICENAME == "poly" ]; then
                        dockerrepo=amirstudent3232/poly
                        echo $DOCKER_CREDENTIALS_PSW | docker login -u $DOCKER_CREDENTIALS_USR --password-stdin
                        docker push $dockerrepo:${BUILD_NUMBER}
                        echo "uploading poly finished successfully"
                    fi
                #done
            '''
            }
            post {
                always {
                    script {
                    sh '''
                        docker system prune -a --force
                    '''
                    }
                }
            }
        }
        stage('Deploy job') {
            when {
                expression {COMMIT_MESSAGE =~ "true"}
            }
            steps {
                withCredentials([string(credentialsId: 'amir-token', variable: 'AMIR_TOKEN')]) {
                sh '''
                    echo "start updating the yamls"
                    git config --global --add safe.directory /var/lib/jenkins/workspace/prod/releases-prod
                    git config --global user.email "amirstudent3232@gmail.com"
                    git config --global user.name "amirstudent3232"
                    git config --global credential.helper cache
                    git remote set-url origin https://amirstudent3232:"${AMIR_TOKEN}"@github.com/amirstudent3232/K8SProject.git
                    git checkout releases
                    git config pull.ff only
                    git branch
                        if [ $FIRSTSERVICENAME == "yolo" ]; then
                            sed -i -e "s|image: amirstudent3232/yolo:[0-9]\\+|image: amirstudent3232/yolo:${BUILD_NUMBER}|g" k8s/yolo.yaml
                            git add k8s/yolo.yaml
                            git commit --allow-empty -m "upgrade yolo image in the yam"
                            #git push https://amirstudent3232:"${AMIR_TOKEN}"@github.com/amirstudent3232/K8SProject.git master
                            git push origin releases
                            #git push master HEAD:master
                            echo "yolo yaml has been changed successfully"
                        fi
                        if [ $SECONDSERVICENAME == "poly" ]; then
                            echo "in if ff"
                            sed -i -e \"s|image: .*|image: amirstudent3232/poly:${BUILD_NUMBER}|\" k8s/$BRANCHNAME/poly.yaml
                            git add k8s/poly.yaml
                            git commit --allow-empty -m "upgrade poly image in the yam"
                            #echo "token is: ${AMIR_TOKEN}"
                            git config pull.ff only
                            git push https://amirstudent3232:"${AMIR_TOKEN}"@github.com/amirstudent3232/K8SProject.git releases || git pull origin releases
                            git push https://amirstudent3232:"${AMIR_TOKEN}"@github.com/amirstudent3232/K8SProject.git releases
                            ##git push origin releases
                            echo "poly yaml has been changed successfully!!"

                        fi
                '''
                }
            }
        }
    }
}